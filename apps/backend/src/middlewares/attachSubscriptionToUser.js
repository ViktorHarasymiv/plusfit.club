// src/middleware/attachSubscriptionToUser.js

import { SubscriptionsCollection } from '../db/models/subscriptions.js';
import { UsersCollection } from '../db/models/user.js';

export const attachSubscriptionToUser = async (req, res, next) => {
  try {
    const { email } = req.body;

    if (!email) {
      console.warn('üì≠ No email provided for subscription lookup');
      return next();
    }

    // –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ
    const user = await UsersCollection.findOne({ email });
    if (!user) {
      console.warn(`üë§ User with email ${email} not found`);
      return next();
    }

    // –ó–Ω–∞–π—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑ —Ç–∞–∫–∏–º email
    const subscription = await SubscriptionsCollection.findOne({ email });
    if (!subscription) {
      console.log(`üìÑ No subscription found for ${email}`);
      return next();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–π
    const alreadyLinked = user.history?.some(
      (entry) =>
        entry.subscriptionId?.toString() === subscription._id.toString(),
    );
    if (alreadyLinked) {
      console.log(`üîÅ Subscription already linked to user ${email}`);
      return next();
    }

    // –î–æ–¥–∞—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    user.history.push({
      subscriptionId: subscription._id,
      type: subscription.type,
      startDate: subscription.startDate,
      endDate: subscription.endDate,
      price: subscription.price,
      method: subscription.method,
      status: subscription.status,
      addedAt: new Date(),
    });

    await user.save();

    // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    subscription.status = 'claimed';
    await subscription.save();

    console.log(`‚úÖ Subscription linked to user ${email}`);
    next();
  } catch (error) {
    console.error('‚ùå Error in attachSubscriptionToUser middleware:', error);
    next(error);
  }
};
